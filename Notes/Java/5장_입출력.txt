Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-11T09:35:01+09:00

====== 5장 입출력 ======
Created 화요일 11 9월 2018


==== 1. 콘솔 입출력 ====

사용자에게 문자열을 보여주는 것을 콘솔 출력이라고 한다.


자바의 System.in 을 이용하면 콘솔 입력을 얻을 수 있다. 다음의 예제를 작성해 보자.

import java.io.InputStream;

public class StreamTest {
	public static void main(String[] args) throws Exception {
		InputStream in = System.in;

		int a;
		a = in.read();

		System.out.println(a);
	}
}

위 코드에서 사용한 InputStream은 자바의 내장 클래스이다. 

System.in은 InputStream의 객체이다.

import java.io.InputStream;

int a;
a = in.read();

 read메소드로 읽은 1 byte의 데이터는 int 자료형으로 저장된다. 
저장되는 int 값은 8bit 0-255 사이의 정수값으로 아스키 코드값이다.

 InputStream의 read()메소드가 호출되면 사용자의 입력을 받을 때까지 프로그램이 대기한다.



public class StreamTest {
	public static void main(String[] args) throws Exception {
		InputStream in = System.in;

		byte[] a = new byte[3];
		in.read(a);

		System.out.println(a[0]);
		System.out.println(a[1]);
		System.out.println(a[2]);
	}
}

길이 3 짜리 byte배열을 만든 후 read메소드 호출시 입력값으로 전달하면 콘솔 입력이 해당 배열에 저장이 된다. 프로그램을 실행해 보면 이전과 동일한 결과가 출력되는것을 확인 할 수 있다.


바이트 대신 문자로 입력스트림을 읽으려면 __InputStreamReader__를 사용한다.

__입력한 문자값 그대로 3byte만 출력하기__

import java.io.InputStream;
import java.io.InputStreamReader;

public class StreamTest {
	public static void main(String[] args) throws Exception {
		InputStream in = System.in;
		InputStreamReader reader = new InputStreamReader(in);
		char[] a = new char[3];
		reader.read(a);

		System.out.println(a);
	}
}

전에는 읽어들일 값을 byte배열로 선언 했는데 InputStreamReader를 시용하면 byte 대신 char 배열을 사용한다.


__BufferedReader__를 사용하여 사용자의 입력을 전부 받아들이기.

__입력한 문자값 전부 출력하기__

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

public class StreamTest {
	public static void main(String[] args) throws Exception {
		InputStream in = System.in;
		InputStreamReader reader = new InputStreamReader(in);
		BufferedReader br = new BufferedReader(reader);

		String a = br.readLine();
		System.out.println(a);
	}
}

BufferedReader는 객체 생성시 생성자의 입력값으로 InputStreamReader의 객체가 필요하다.
BufferedReader의 readLine메소드를 이용하면 엔터키를 입력할 때까지 입력했던 문자열 전부를 읽을 수 있게 된다.

InputStream - byte
InputSteamReader - character
Bufferedreader - String

**※ 위 예제에 main 메소드를 보면 throws Exception 을 사용한 부분이 있다. InputStream으로 부터 값을 읽어들일 때는 IOException이 발생할 수 있기 때문에 예외처리를 해야 하는데 throws로 그 예외처리를 뒤로 미루게 한 것이다. 예외처리는 다음 챕터에서 자세히 다룰 예정이니 지금은 그냥 넘어가도록 하자.**

==== Scanner ====

Scanner 클래스를 이용하면 콘솔입력을 보다 쉽게 처리 할 수 있다.

다음의 예제를 보자.

import java.util.Scanner;

public class Test {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println(sc.next());
	}
}

Scanner 를 사용하기 위해서는 먼저 java.util.Scanner 클래스를 import 해야 한다.

Scanner 클래스는 생성자의 입력으로 System.in, 즉 콘솔입력인 InputStream 을 필요로 한다.

Scanner 객체의 next() 메소드는 단어 하나(Token)를 읽어들인다.

Scanner클래스에는 단어 뿐만 아니라 숫자, 문자열등 다양하게 읽어 들일 수 있는 여러 메소드들이 준비되어 있는데 몇가지만 알아보면 다음과 같은 것들이 있다.

* next - 단어
* nextLine - 라인
* nextInt - 정수


--------------------

==== 2. 파일 입출력 ====


== 파일 쓰기 ==


**파일 만들기**

import java.io.FileOutputStream;
import java.io.IOException;

public class FileWrite {
	public static void main(String[] args) throws IOException {
		FileOutputStream output = new FileOutputStream("c:/out.txt");
		output.close();
	}
}

c:/ 디렉토리 바로 밑에 새로운 파일(out.txt)이 하나 생성되는 것을 확인할 수 있다.

* 파일을 생성하기 위해서 우리는 FileOutputStream 클래스를 사용했다.
* FileOutputStream 객체를 생성하기 위해서는 생성자의 입력으로 파일명을 넘겨주어야 한다. 
* 위 예제에서는 경로를 포함하여 c:/out.txt라는 파일명을 생성자의 입력으로 전달하였다.

위의 예에서보면 output.close()라는 문장이 있는데 이것은 사용한 파일 객체를 닫아주는 것이다.
자바 프로그램이 종료할 때 사용한 파일 객체를 자동으로 닫아주기 때문에 output.close()라는 문장은 생략해도된다.
하지만 직접 사용한 파일을 닫아주는 것이 좋다. 
사용했던 파일을 닫지 않고 다시 사용하려고 할 경우에는 에러가 발생할 수 있기 때문이다.



**파일에 내용쓰기 - FileOutputStream**

import java.io.FileOutputStream;
import java.io.IOException;

public class FileWrite {
	public static void main(String[] args) throws IOException {
		FileOutputStream output = new FileOutputStream("c:/out.txt");
		for(int i=1; i<11; i++) {
			String data = i+" 번째 줄입니다.\r\n";
			output.write(data.getBytes());
		}
		output.close();
	}
}

FileOutputStream 클래스를 사용했다

InputStream과 마찬가지로 OutputStream 역시 바이트 단위로 데이터를 처리하는 클래스이다. 
__FileOutputStream은 OutputStream클래스를 상속받아 만든 클래스인데 역시 바이트 단위로 데이터를 처리__하게끔 되어 있다.

FileOutputStream에 값을 쓸 때는 byte배열로 써야 하므로 위와같이 String을 byte배열로 바꾸어 주는 getBytes() 메써드를 이용해야만 했다. \r\n은 줄바꿈 문자이다. (※ 유닉스인 경우는 \n 만 있으면 된다. 윈도우즈의 경우 \r\n 처럼 \r 문자를 추가해야 노트패드 같은 에디터에서 줄바꿈이 제대로 표시되어 보인다.)

문자열을 파일에 쓸 때에는 __FileOutputStream이 좀 불편하다. String을 byte배열로 변환해야 하기 때문__이다.



**파일에 내용쓰기 - FileWriter**

import java.io.FileWriter;
import java.io.IOException;

public class FileWrite {
	public static void main(String[] args) throws IOException {
		FileWriter fw = new FileWriter("c:/out.txt");
		for(int i=1; i<11; i++) {
			String data = i+" 번째 줄입니다.\r\n";
			fw.write(data);
		}
		fw.close();
	}
}
위 예제와 같이 FileOutputStream 대신에 __FileWriter__ 를 이용하면 byte 배열 대신 문자열을 직접 파일에 쓸 수가 있다.

하지만 \r\n을 문자열 뒤에 덧 붙여야 하는 불편함은 여전히 남아있다.

이런 불편함을 해소하려면 FileWriter대신 __PrintWriter__를 사용하면 된다. PrintWriter를 이용하면 \r\n을 덧붙이는 대신 __println__이라는 메써드를 사용할 수 있게 된다.

다음은 PrintWriter를 이용하여 파일을 작성하는 예제이다.

**파일에 내용쓰기 - PrintWriter**

import java.io.IOException;
import java.io.PrintWriter;

public class FileWrite {
	public static void main(String[] args) throws IOException {
		PrintWriter pw = new PrintWriter("c:/out.txt");
		for(int i=1; i<11; i++) {
			String data = i+" 번째 줄입니다.";
			pw.println(data); //화면에 출력될 내용이 파일로 보내어 진다.
		}
		pw.close();
	}
}
위의 프로그램을 다음의 프로그램과 비교해 보자.

for(int i=1; i<11; i++) {
	String data = i+" 번째 줄입니다.";
	System.out.println(data);
}
두 프로그램의 서로 다른 점은 data를 출력시키는 방법이다. 두 번째 방법은 우리가 지금껏 계속 사용해 왔던 콘솔 출력 방법이고 첫 번째 방법은 콘솔대신에 파일로 출력하는 방법이다. 차이점이 금방 눈에 들어 올 것이다. System.out대신에 PrintWriter를 이용했을 뿐이다.

첫 번째 예제를 작성해서 실행시키면 c:/out.txt 파일이 생성된다.

파일에 어떤 내용이 저장되었는지 확인 해 보자.

out.txt의 내용

1 번째 줄입니다.
2 번째 줄입니다.
3 번째 줄입니다.
4 번째 줄입니다.
5 번째 줄입니다.
6 번째 줄입니다.
7 번째 줄입니다.
8 번째 줄입니다.
9 번째 줄입니다.
10 번째 줄입니다.
두 번째 방법을 사용했을 때 콘솔에 출력될 내용이 파일에 고스란히 들어가 있는 것을 알 수 있다.

__fileoutputstream 은 string 을 byte배열로 변환해야함__

__filewriter 사용하면 문자열을 직접 파일에 쓸 수 있다. filewriter은 문자열뒤에 줄바꿈 \r\n을 붙여야한다__

__printWriter을 사용 하여 \r\n대신 println이라는 메소드를 사용하였다.__


**파일에 내용 추가하기**

프로그램을 만들다 보면 파일에 내용을 쓰고 난 후에 또 새로운 내용을 추가하고 싶을 때가 생긴다. 

이럴 경우에는 이미 작성된 파일을 다시 **추가모드로 열어야 한다**.

다음의 예제를 보자.

import java.io.FileWriter;
import java.io.IOException;

public class FileWrite {
	public static void main(String[] args) throws IOException {
		FileWriter fw = new FileWriter("c:/out.txt");
		for(int i=1; i<11; i++) {
			String data = i+" 번째 줄입니다.\r\n";
			fw.write(data);
		}
		fw.close();

		FileWriter fw2 = new FileWriter("c:/out.txt", true);
		for(int i=11; i<21; i++) {
			String data = i+" 번째 줄입니다.\r\n";
			fw2.write(data);
		}
		fw2.close();
	}
}

fw2라는 객체는 FileWriter("c:/out.txt", true) 와 같이 두번째 입력값이 추가로 입력되어 생성되었다. 
두번째 boolean 입력 파라미터는 파일을 추가모드(append)로 열것인지에 대한 구분값이다. 
파일을 추가모드로 열면 기존파일의 내용이후부터 파일이 쓰여지게 된다.

new FileWriter(파일명, 추가모드구분)
이제 위 예제를 실행하면 out.txt파일에 내용이 추가되는 것을 확인할 수 있을 것이다.

만약 FileWriter대신 PrintWriter를 이용하고 싶은 경우에는 다음과 같이 변경해야 한다.

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class FileWrite {
	public static void main(String[] args) throws IOException {
		PrintWriter pw = new PrintWriter("c:/out.txt");
		for(int i=1; i<11; i++) {
			String data = i+" 번째 줄입니다.";
			pw.println(data);
		}
		pw.close();


		PrintWriter pw2 = new PrintWriter(new FileWriter("c:/out.txt", true));
		for(int i=11; i<21; i++) {
			String data = i+" 번째 줄입니다.";
			pw2.println(data);
		}
		pw2.close();
	}
}

PrintWriter의 생성자의 입력으로 파일명 대신 추가모드로 열린 FileWriter의 객체를 사용하면 된다.



**파일 읽기**

이번에는 파일을 읽는 방법에 대해서 알아보도록 하자.

다음의 예제를 작성해 보자.

FileRead.java

import java.io.FileInputStream;
import java.io.IOException;

public class FileRead {
	public static void main(String[] args) throws IOException {
		byte[] b = new byte[1024];
		FileInputStream input = new FileInputStream("c:/out.txt");
		input.read(b);
		System.out.println(new String(b));
		input.close();
	}
}

파일을 읽기 위해서는 위 예처럼 __FileInputStream__ 클래스를 이용하면 된다. 
**다만 byte 배열을 이용하여 파일을 읽어야 하기 때문에 읽어야 하는 정확한 길이를 모를 경우에는**
**좀 불편한 방법**이다.

만약 파일을 라인단위로 읽을 수 있다면 훨씬 편리할 것이다. 다음과 같이 예제를 수정해 보자.

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class FileRead {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("c:/out.txt"));
		while(true) {
			String line = br.readLine();
			if (line==null) break;
			System.out.println(line);
		}
		br.close();
	}
}
위 예처럼 FileInputStream 대신 __FileReader와 BufferedReader의 조합__을 사용하면 라인단위로 파일을 읽을 수 있다.

BufferedReader의 readLine 메소드는 더이상 읽을 라인이 없을 경우 null을 리턴한다.

위 예는 파일을 라인단위로 읽어서 출력하고 더 이상 읽을 라인이 없는 경우 while문을 빠져나간다.

파일의 모든 내용을 읽는다.














































