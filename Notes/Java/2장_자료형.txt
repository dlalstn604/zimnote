Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-05T16:11:44+09:00

====== 2장 자료형 ======
Created 수요일 05 9월 2018

==== 1. 숫자 ====

int = 32비트 / long = 64비트 
long를 사용할때 값의 마지막에 'L' 을 붙여준다.

실수형은 디폴트가 double 
float 마지막에 'F' 를 붙여준다.

8진수 =  앞에 0으로 시작한다.
16진수 = 앞에 0x 로 시작한다.

--------------------

==== 2. 부울 ====

'==' 는 주소값까지 비교한다. 부울연산 = false;

값을 비교할때는 .equals() 를 사용한다.

예) int a = 3 / int b = 3 일때
a == b  false
a.equals(b)  true

--------------------

==== 3. 문자 ====


한 개의 문자 값에 대한 자료형은 char 를 이용한다.

char는 값을 '작은따옴표'를 사용한다

예) 
char a = 'a' 

잘못된 예)
char a = "a" / char b = 'abc'

--------------------

==== 4. 문자열 ====

문장을 뜻하는 문자열의 자료형은 String이다.

String 는 값을 "큰따옴표"를 사용한다.

예)
String a = "a" / String b = "Happy"

잘못된 예)
String a = 'a' 


**문자열을 자바에서 표현하려면**

String a = "Happy Java"; 는 아래와 같이 표현해도 된다.
String a = new String("Happy Java")

하지만 보통 문자열을 표현할 때는 가급적 첫번째 방식(literal 표기)을 사용하는 것이 좋다. 
첫 번째 처럼 사용하면 가독성에 이점이 있고 컴파일 시 최적화에 도움을 주기 때문이다.


**primitive (원시) 자료형**

* new 키워드로 생성할 수 없다.
* 리터럴 값을 세팅할 수 있다. (리터럴은 계산식 없이 소스코드에 표기하는 상수)

String은 리터럴로 표기가 가능하지만 primitive 자료형은 아니다.

String a = "happy java" 와 String a = new String("happy java")는 같은 값을 갖게 되지만 다르다.
첫번째 방식은 literal String이라고 불리우는데 "happy java" 라는 문자열을 intern pool 이라는 곳에 저장하고 다음에 다시 동일한 문자열이 선언될때는 cache 된 문자열을 리턴한다. 
두번째 방식은 항상 새로운 String 객체를 만든다.

**equals**
두 개의 문자열이 동일한 값을 가지고 있는지를 비교하여 결과값을 리턴한다.

**indexOf**
문자열에서 특정 문자가 시작되는 인덱스를 리턴한다.

**replaceAll**
문자열 중 특정 문자를 다른 문자로 바꾸고 싶을 경우에 사용한다.

**substring**
문자열 중 특정 부분을 뽑아낼 경우에 사용한다.

**toUpperCase**
문자열을 모두 대문자로 변경하고자 할 때 사용한다. (모두 소문자로 변경할때는 toLowerCase를 사용하면 된다.)

--------------------

==== 5. StringBuffer ====


문자열을 추가하거나 변경 할 때 주로 사용하는 자료형.

1. append
2. insert
3. substring

**append**

		StringBuffer sb = new StringBuffer();
		sb.append("hello");
		sb.append(" ");
		sb.append("jump to java");
		System.out.println(sb.toString());

	String temp = "";
		temp += "hello";
		temp += " ";
		temp += "jump to java";
		System.out.println(temp);

두 개의 예제 모두 결과는 동일하지만 hello jump to java

첫번 째 예제의 경우 StringBuffer 객체는 단 한번만 생성된다. 
두번 째 예제는 + 연산이 있을 때마다 새로운 String 객체가 생성된다
두번 째 예제에서는 총 4개의 String 자료형 객체가 만들어지게 된다.

문자열 추가나 변경등의 작업이 많을 경우에는 StringBuffer를, 
문자열 변경 작업이 거의 없는 경우에는 그냥 String을 사용하는 것이 유리하다.


**insert**

insert 메소드는 특정 위치에 원하는 문자열을 삽입할 수 있다.
sb.insert(0, "hello ");

**substring**

substring(시작위치, 끝위치)와 같이 사용하면 StringBuffer 객체의 시작위치에서 끝위치까지의 문자를 뽑아내게 된다.

--------------------

==== 6. 배열 ====

int[] odds = {1, 3, 5, 7, 9};


배열의 길이는 고정되어 있다.

원하는 값 출력
String[] weeks = {"월", "화", "수", "목", "금", "토", "일"};
System.out.println(weeks[3]);


순서대로 출력
String[] weeks = {"월", "화", "수", "목", "금", "토", "일"};
for (int i=0; i<weeks.length; i++) {
	System.out.println(weeks[i]);
}

--------------------

==== 7. 리스트 ====

프로그래밍 시 명확한 크기를 알 수 없는 경우가 더 많다.
동적으로 자료형의 갯수가 가변하는 상황이라면 List를 사용하는 것

**add**
차례로 삽
pitches.add("142");
pitches.add("129");

첫번째 위치에 삽입
pitches.add(0, "133"); 

**get**
특정 인덱스의 값을 추출할 수 있다.
System.out.println(pitches.get(1));

**size**
pitches에 담긴 갯수에 해당되는 값이 출력될 것이다.
System.out.println(pitches.size());

**contains**
리스트 안에 항목값이 있는지를 판별하여 그 결과를 boolean으로 리턴한다.
System.out.println(pitches.contains("142"));

**remove**
리스트에서 요소 삭제
객체 / 인덱스

System.out.println(pitches.remove("129"));
true

System.out.println(pitches.remove(0));
138

--------------------

==== 8. 맵 ====

맵(Map)은 사전(dictionary)과 비슷하다. 즉, people 이란 단어에 "사람", baseball 이라는 단어에 "야구"라는 뜻이 부합되듯이 Map은 Key와 Value라는 것을 한 쌍으로 갖는 자료형이다.
Associative array, Hash라고도 불린다.

Map은 리스트나 배열처럼 순차적으로(sequential) 해당 요소 값을 구하지 않고 key를 통해 value를 얻는다. 맵(Map)의 가장 큰 특징이라면 key로 value를 얻어낸다는 점이다. baseball이란 단어의 뜻을 찾기 위해서 사전의 내용을 순차적으로 모두 검색하는 것이 아니라 baseball이라는 단어가 있는 곳만을 펼쳐보는 것이다.

**put**
제네릭스를 사용한다.

HashMap<String, String> map = new HashMap<String, String>();
map.put("people", "사람");
map.put("baseball", "야구");

**get**
키값을 이용하여 value 값을 얻는다
System.out.println(map.get("people"));

**containsKey**
맵(Map)에 해당 키(key)가 있는지를 조사하여 그 결과값을 리턴한다.
System.out.println(map.containsKey("people"));

**remove**
맵(Map)의 항목을 삭제하는 메소드로 key값에 해당되는 아이템(key, value)을 삭제한 후 그 value 값을 리턴한다.
System.out.println(map.remove("people"));

**size**
Map의 갯수를 리턴한다.
System.out.println(map.size());

__LinkedHashMap과 TreeMap__

__Map의 가장 큰 특징은 순서에 의존하지 않고 key로 value를 가져오는데 있다. 하지만 가끔은 Map에 입력된 순서대로 데이터를 가져오고 싶은 경우도 있고 때로는 입력된 key에 의해 소트된 데이터를 가져오고 싶을 수도 있을 것이다. 이런경우에는 LinkedHashMap과 TreeMap을 사용하는 것이 유리하다.__

* __LinkedHashMap은 입력된 순서대로 데이터가 출력되는 특징을 가지고 있다.__
* __TreeMap은 입력된 key의 소트순으로 데이터가 출력되는 특징을 가지고 있다.__

















