Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-05T16:12:56+09:00

====== 4장 객체지향 프로그래밍 ======
Created 수요일 05 9월 2018

자바는 객체지향(Object Oriented) 프로그래밍 언어이다.

객체지향에는 많은 개념들이 존재한다.

* 클래스, 객체, 인스턴스
* 상속
* 인터페이스
* 다형성
* 추상화

개념을 늘어놓고 설명을 해 나간다면 지루하기도 하고 도대체 어디에 써 먹을 수 있는건지 애매하기 때문에 여기서는 주로 예제위주의 설명으로 자바의 객체지향적 특징을 알아보도록 하자.

아마도 자바를 배우는 데 가장 큰 고비가 바로 이 객체지향 부분일 것이다. 생소하기도 하고 좀 어려운 내용이 많은데 너무 겁내지는 말자. 이 부분만 잘 알고 넘어가면 탄탄대로가 나타나게 된다.

--------------------

==== 1. 클래스 ====

public class Animal { }
"동물" 이라는 클래스를 선언한다
객체를 만드는 기능을 가지고 있다.

Animal cat = new Animal();

※ 객체와 인스턴스

클래스에 의해서 만들어진 객체를 인스턴스라고도 한다. 

__객체와 인스턴스의 차이__

Animal cat = new Animal() 이렇게 만들어진 cat은 객체이다.
cat이라는 객체는 Animal의 인스턴스(instance)이다. 즉 인스턴스라는 말은 특정 객체(cat)가 어떤 클래스(Animal)의 객체인지를 관계위주로 설명할 때 사용된다. 
"cat은 객체"이고 "cat은 Animal의 인스턴스" 라고 표현한다.

Animal cat = new Animal();
Animal dog = new Animal();
Animal horse = new Animal();
...

__객체 변수  (Instance variable)__

public class Animal {
	String name;
}

Animal 클래스에 name 이라는 String 변수를 추가했다.
클래스에 선언된 변수를 객체 변수 라고 부른다. 또는 인스턴스 변수, 멤버 변수, 속성이라고도 말한다.

객체변수를 출력하려면 
객체.객체변수
cat.name


__메소드__

public class Animal {
	String name;

	public void setName(String name) {
		this.name = name;
	}

	public static void main(String[] args) {
		Animal cat = new Animal();
		System.out.println(cat.name);
	}
}

void 는 타입을 말함 null 리턴값이 없음 

setName 메소드 내부에 사용된 this는 Animal 클래스에 의해서 생성된 객체를 지칭한다. 
만약 Animal cat = new Animal( ) 과 같이 cat이라는 객체를 만들고 cat.setName("boby") 와 같이 cat객체에 의해 setName 메소드를 호출하면 setName 메소드 내부에 선언된 this는 바로 cat 객체를 지칭하게 된다.

만약 Animal dog = new Animal()로 dog 객체를 만든 후 dog.setName("happy") 와 같이 호출한다면 setName 메소드 내부에 선언된 this는 바로 dog 객체를 가르키게 된다.

--------------------

==== 2. 메소드 ====

여러 번 반복해서 사용된다는 것은 언제고 또다시 사용할 만한 가치가 있는 것을 메소드로 만들어놓음

**메소드의 구조**

public 리턴자료형 메소드명(입력자료형1 입력변수1, 입력자료형2 입력변수2, ...) {
	...    
	return 리턴값;  // 리턴자료형이 void 인 경우에는 return 문이 필요없다.
}

public class Test {
	public int sum(int a, int b) {
		return a+b;
	}
	public static void main(String[] args) {
		int a = 3;
		int b = 4;
		
		Test myTest = new Test();
		int c = myTest.sum(a, b);
		
		System.out.println(c);
	}
}

sum , main 메소드 두 개가 있다.
sum 메소드의 리턴값의 타입은 int 이고, main 메소드는 리턴값이 없다(void).

int a = 3; 이라면 a = 3 만의 저장소를 가지고 있고 int a = 4; 이면 a = 3 자체를 버리고 int a = 4;를 새로만든다.

new 는 객체를 Test( ) 객체의 인스턴스를 만들 준비를 하라는 명령어

* 입력과 출력이 모두 있는 메소드

* 입력과 출력이 모두 없는 메소드

* 입력은 없고 출력은 있는 메소드

* 입력은 있고 출력은 없는 메소드
package testProject;

public class Test2 {
	public void sum(int a, int b) {
		System.out.println(a + "과 "+b+"의 합은 "+(a+b)+"입니다.");
	}
	public static void main(String[] args) {
		Test2 myTest = new Test2();
		myTest.sum(3, 4);
	}
}

__return의 또 다른 쓰임새__

리턴 자료형이 void형인 메소드에서 rethrn 문을 이용하면 문자열을 출력하지 않고 메소드를 즉시 빠져나간다.

메소드 내에서 선언된 변수의 효력 범위

메소드 내에서 사용되는 변수는 메소드 안에서만 쓰여지는 변수이다. 
즉 public void vartest(int a) 라는 문장에서 입력 인수를 뜻하는 변수 a는 
메소드 안에서만 쓰이는 변수이지 메소드 밖의 변수 a가 아니라는 말이다.

메소드 내에서만 쓰이는 변수를 로컬 변수라고 한다

메소드에서 리턴값을 줬을때 main메소드에서 출력이 가능하다.


__메소드 내에서 선언된 변수의 효력 범위__

public class Tset {
	public void vartest(int a) {
		a++;
	}
	
	public static void main(String[] args) {
		int a = 1;
		Test myTest = new Test( );
		myTest.vartest(a);
		System.out.println(a);
	}
}

메소드 vartest(int a) 의 리턴값이 void여서 main메소드에 영향을 주지 않는다.

__객체변수를 이용하여 메소드 수정__

public class Test {

	int a;  // 객체변수 a

	public void vartest(Test test) {
		test.a++;
	}

	public static void main(String[] args) {
		Test myTest = new Test();
		myTest.a = 1;
		myTest.vartest(myTest);
		System.out.println(myTest.a);
	}
}

__this를 이용한 var 메소드 수정__

public class Test {

	int a;  // 객체변수 a

	public void vartest( ) {
		this.a++;
	}

	public static void main(String[] args) {
		Test myTest = new Test();
		myTest.a = 1;
		myTest.vartest( );
		System.out.println(myTest.a);
	}
}
--------------------

==== 3. Call by value ====

메소드로 객체를 전달할 경우 메소드에서 객체의 객체변수(속성) 값을 변경할 수 있게 된다.

class Updater {
	public void update(int count) {
		count++;
	}
}
public class Counter {
	int count = 0; //객체변수
	public static void main(Stirng[ ] args) {
		Counter myCounter = new Counter( );
		System.out.println("before update:"+myCounter.count);
		Updater myUpdater = new Updater( );
		myUpdater.update(myCounter.count);
		System.out.println("after update:"+myCounter.count);
	}
}


class Updater {
	public void update(Counter counter) {
		counter.count++;
	}
}

public class Counter {
	int count = 0;
	public static void main(String[] args) {
		Counter myCounter = new Counter();
		System.out.println("before update:"+myCounter.count);
		Updater myUpdater = new Updater();
		myUpdater.update(myCounter);
		System.out.println("after update:"+myCounter.count);
	}
}


위의 예제는 int count 와 같이 값을 전달받았으나 
아래의 예제는 Counter counter 와 같이 객체를 전달 받도록 변경했다.

update 메소드를 호출하는부분도 myCounter로 바뀌었다.

메소드의 입력으로 객체를 전달받는 경우에는 메소드가 입력받은 객체를 그래도 사용한다.
메소드가 객체의 속성값을 변경하면 메소드 수행 후 객체의 변경된 속성값이 유지되게 된다.

--------------------

==== 4. 상속 ====

**자원의 재사용성**을 높이고 재사용된 **자원을 변형하거나 추가**하는 역할을 한다

Animal 클래스를 상속하는 Dog클래스를 만들어 보자.

public class Animal {
	String name;

	public void setName(String name) {
		this.name = name;
	}
}

Animal 클래스에 객체변수 name / setName 메소드를 만든다. 

public class Dog extends Animal {
	public void sleep( ) {
		System.out.println(this.name + " zzz");
	}
	public static void main(String[ ] args) {
		Dog dog = new Dog( );
		dog.setName("puppy");
		System.out.println(dog.name);
		dog.sleep( );
	}
}

Dog 클래스에 객체변수 name과 setName 메소드를 만들지 않아도
Animal 클래스를 상속 받았기 때문에 Animal 클래스에 있는 객체변수와 메소드를 사용가능하다.


__IS - A 관계__

자바는 상속의 관계에 있는 것을 IS-A 관계라고 한다.

위의 예를 들어 Dog __is a__ Animal 과 같이 표현할 수 있다. 

IS-A 관계에 있을때 자식 객체는 부모 클래스의 자료형인 것처럼 사용할 수 있다.

Dog dog = new Dog( ) ; // 개로 만든 객체는 개 자료형이다.

Animal dog = new Dog( ) ; // 개로만든 객체는 동물 자료형이다.

예외)
Dog dog = new Animal( ); // 동물로 만든 객체는 개자료형이다


__메소드 오버라이딩 (Method overriding)__

public class Dog extends Animal {
	public void sleep() {
		System.out.println(this.name+" zzz");
	}
}

public class HouseDog extends Dog {
	public void sleep() {
		System.out.println(this.name+" zzz in house");
	} 

	public static void main(String[] args) {
		HouseDog houseDog = new HouseDog();
		houseDog.setName("happy");
		houseDog.sleep();
	}
}

자식 클래스에 부모 클래스의 메소드와 동일한 메소드를 구현하면 자식 클래스는 부모 클래스보다
자신의 클래스를 더 높은 우선순위를 갖게 되어 자신의 메소드를 호출하게 된다.

부모클래스의 메소드를 자식클래스가 동일한 형태로 또 다시 구현하는 행위를 
**메소드 오버라이딩(Method Overriding)**이라고 한다.


__메소드 오버로딩 (Method overloading)__

public class HouseDog extends Dog {
	public void sleep( ) {
		System.out.println(this.name+" zzz in house");
	} 

	public void sleep(int hour) {
		System.out.println(this.name+" zzz in house for " + hour + " hours");
	} 

	public static void main(String[] args) {
		HouseDog houseDog = new HouseDog();
		houseDog.setName("happy");
		houseDog.sleep();     // sleep() 메소드 호출
		houseDog.sleep(3);   // sleep(int hour) 메소드 호출
	}
}

부모 메소드의 입력항목의 타입과 다른 동일한 이름의 메소드를 만들수 있는데 
이것을 **메소드 오버로딩(Method overloading)** 이라고 부른다.

--------------------

==== 5. 생성자 ====

생성자의 규칙
1. 클래스명과 메소드명이 동일하다.
2. 리턴타입을 정의하지 않는다. 값을 반환하지 않는다.


객체가 만들어질때 기본적으로 가져야할 항목을 설정할 때 사용한다.

public class HouseDog extends Dog {
	public HouseDog(String name) { __//생성자__
		this.setName(name);
	} 
	
	public void sleep() {//오버라이딩
		System.out.println(this.name+" zzz zzz zzz");
	}
	
	public void sleep(int hour) {
		System.out.println(this.name+" zzz zzz zzz "+hour+"hours");
	}
	
	public static void main(String[] args) {
		HouseDog dog = new HouseDog("happy"); __//new 로 객체가 만들어질때 설정__
		System.out.println(dog.name);
		//HouseDog dog2 = new HouseDog(); __// 반드시 name을 설정해줘야 한다.컴파일 오류가 발생.__
		//System.out.println(dog2.name); 
	}

}


==== default 생성자 ====

public Dog( ) {
}

생성자의 입력 항목이 없고 생성자 내부에 아무 내용이 없는 생성자를 __default 생성자__라고 부른다.

new Dog( ) 로 Dog 객체가 만들어 질 때 디폴트 생성자가 실행된다.

만약 클래스에 생성자가 하나도 없다면 컴파일러는 자동으로 디폴트 생성자를 추가한다.
자동으로 생성되는 디폴트 생성자는 표시되지 않는다.

사용자가 작성한 생성자가 하나라도 구현되어 있다면 컴파일러는 디폴트 생성자를 추가하지 않는다.


==== 생성자 오버로딩 ====

하나의 클래스에 여러개의 입력항목이 다른 생성자를 만들 수 있다.

	public HouseDog(String name) {
		this.setName(name);
	}

	public HouseDog(int type) {
		if (type == 1) {
			this.setName("yorkshire");
		} else if (type == 2) {
			this.setName("bulldog");
		}
	}

new로 인스턴스를 만들때 객체변수에 넣을 값을 둘중 생성자 하나만 넣어줘도 오류가 나지 않는다.


==== super ====

class가 인스턴스화 될때 생성자가 실행되면서 객체를 초기화 한다.

그 때 자신의 생성자만 실행이 되는것이 아니고, 부모의 생성자부터 차례로 실행된다. 

하위 클래스의 생성자에서 super를 사용할 때 주의할 점은 super가 가장 먼저 나타나야 한다.

public class Car {
	public Car(String name) {
		System.out.println("Car의 기본생성자 입니다."+name);
	}
}

public class Bus extends Car {
	public Bus(String name1) {
		super("dd");
		//컴파일러가 자동으로 부모의 생성자를 호출하면서 부모객체를 초기화
		System.out.println("Bus의 기본생성자 입니다."+name1);
	}
}

public class BusExam {
	public static void main(String[] args) {
		Bus b = new Bus("ha"); 
		//Bus 객체가 메모리에 올라갈 때 부모인 Car도 함께 메모리에 올라간다.
	}
}

result

Car의 기본생성자 입니다.dd
Bus의 기본생성자 입니다.ha

--------------------

==== 6. 인터페이스 ====


객체가 만들어 질때마다 메서드를 추가하지 않고 인터페이스를 가지고 

하나의 메서드로 추가 할 수 있다.

public class Crocodile extends Animal implements Predator {
}

Animal 클래스를 상속할때는 extends를 사용하고 interface 를 사용할때는 implements를 사용한다.

tiger lion은 각각 Tiger Lion 의 객체이기도 하지만 Predator의 인터페이스의 객체이기도 하기 때문에 Predator 자료형의 타입으로 사용할수있다.

* tiger - Tiger 클래스의 객체, Predator 인터페이스의 객체
* lion - Lion 클래스의 객체, Predator 인터페이스의 객체

※ 이와같이 객체가 한 개 이상의 자료형 타입을 갖게되는 특성을 다형성(폴리모피즘)이라고 한다.


위와 같이 하면 어떠한 객체가 오던 무조건 feed apple 라는 문자열을 출력한다.

인터페이스에 public String getFood() 메서드를 추가한다.

언티페이스의 메소드는 메소드의 이름과 입출력에 대한 정의만 있고 그 내용은 없다.

인터페이스의 메소드는 인터페이스를 implements한 클래스들이 구현한다.

각각의 클래스에 public String getFood() 메서드를 추가한후 리턴값을 지정해준다.

zooKeeper에서 Predator.getFood() 메서드를 실행하면 각각의 리턴값이 나온다.

동물들의 종류만큼의 feed 메소드가 필요했던 ZooKeeper 클래스를 Predator 인터페이스를 이용하여 구현했더니 단 __한개의__ feed 메소드로 구현이 가능해졌다. 

__ZooKeeper클래스가 동물들의 종류에 의존적인 클래스에서 __
__동물들의 종류와 상관없는 독립적인 클래스가 되었다.__

--------------------

==== 7. 다형성 ====

하나의 객체가 여러개의 자료형 타입을 가질 수 있는 것을 다형성, 폴리모피즘 이라고 부른다.

Tiger tiger = new Tiger();
Animal animal = new Tiger();
Predator predator = new Tiger(); 인터페이스 객체
Barkable barkable = new Tiger(); 인터페이스 객체



두개의 인터페이스에 있는 각각의 메소드를 둘다 사용 하고 싶을 때

public interface BarkablePredator  {
	public void bark();
	public String getFood();
}
* 새로운 인터페이스에 기존 인터페이스 내용을 추가
* 기존의 인터페이스 타입을 사용 불가능.


인터페이스는 일반클래스와 달리 extends를 이용하여 여러개의 인터페이스를 동시에 상속할 수 있다.

public interface BarkablePredator extends Predator, Barkable {
}
* 새로운 인터페이스를 만들고 기존의 인터페이스를 상속받아서 사용
* 기존의 인터페이스 타입을 따로 사용가능


__instanceof 는 특정 객체가 특정 클래스의 객체인지를 조사할 때 사용되는 자바의 내장 키워드__이다.
animal instanceof Tiger 는 "animal 객체가 new Tiger 로 만들어진 객체인가?"를 묻는 조건식이다.

--------------------

==== 8. 추상클래스 ====

추상클래스는 인터페이스의 역할도 하면서 일반메소드를 가질 수 있는 돌연변이 클래스 이다.

* class앞에 abstract 라고 표기 해야한다.
* 인스턴스를 만들 수 없다.
* 하나 이상의 추상 메소드를 가진다.
* 일반 메소드를 가질수있다 일반 메소드는 몸통이 있다.
* 인터페이스의 메소드와 같은 메소드 역할을 하는 abstract 메소드에도 타입 앞에 abstract를 붙이도록한다
* abstract메소드는 인터페이스 메소드와 같이 몸통이 없다.






































